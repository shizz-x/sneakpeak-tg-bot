from aiogram import Dispatcher, types, Bot
from modls.MarkUps import ReplyKeyboard as KB
from modls.Utils import Utility
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext



class __FSM__(StatesGroup):
    message = State()



class UnpackFuncs:
    dp: Dispatcher
    keyboard: KB
    bot: Bot

    def __init__(self, bot: Bot, dp: Dispatcher):
        self.dp =       dp
        self.keyboard = KB()
        self.bot =      bot
        self.utils =    Utility()


        self.__unpack()

    def __unpack(self):

        @self.dp.message_handler(commands=['start'])
        async def start(msg: types.Message):

            start_command = msg.text
            referrer_id = start_command[7:]



            if referrer_id != '':
                if referrer_id != str(msg.from_user.id):
                    try:
                        self.utils.add_user(msg.from_user.id, int(referrer_id))
                        await self.bot.send_message(referrer_id, '–ù–û–í–´–ô –†–ï–§–ß–ò–ö –ü–û–î–™–ï–•–ê–õ')
                    except Exception as e:
                        self.utils.add_user(msg.from_user.id)
                else:
                    self.utils.add_user(msg.from_user.id)
                    
            else:
                self.utils.add_user(msg.from_user.id)
            await msg.reply(
                'SEE YA', 
                reply_markup=self.keyboard.start_mk
            )

        
        @self.dp.message_handler(content_types=['text'])
        async def message_handler(msg: types.Message):
            
            first_letter = msg.text[0].lower()

            if first_letter in list(self.__funcs.keys()):
                
                await self.__funcs.get(first_letter)(msg)

    @property
    def __funcs(self) -> dict:

        return {
            'üîé': lambda x: self.__check_website(x),
            'üßÆ': lambda x: self.__gen_price(x),
            'üí≥': lambda x: self.__make_deal(x),
            '‚ûï': lambda x: self.__additional_info(x),
            'üéÅ': lambda x: self.__special_offers(x),
            'üÜì': lambda x: self.__refferal_system(x),
        }

    async def __check_website(self, msg: types.Message) -> None:
        
            
        await msg.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä: ')
        await __FSM__.message.set()


        @self.dp.message_handler(state=__FSM__.message)
        async def procces_answer(msg: types.Message, state: FSMContext):



            url_valid = self.utils.check_uri_exists(uri=msg.text)

            if url_valid:

                await msg.reply('–û—Ç—Å—é–¥–∞ –º–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å')
            else:
                await msg.reply('–ü–æ–∫–∞ —á—Ç–æ –Ω–µ –º–æ–∂–µ–º –ø—Ä–∏–≤–µ–∑—Ç–∏, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞.')
            await state.finish()

        return None
    async def __gen_price(self, msg: types.Message) -> None:
        await msg.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–Ω—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏:')
        await __FSM__.message.set()


        @self.dp.message_handler(state=__FSM__.message)
        async def procces_answer(msg: types.Message, state: FSMContext):
            try:
                await msg.reply(str(int(msg.text) * 107 + 6000) + ' —Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö')
            except Exception as e:
                await msg.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–ª—É—é —Å—É–º–º—É')
            finally:
                await state.finish()


        pass
    async def __make_deal(self, msg: types.Message) -> None:
        await msg.answer('–£–¥–∞—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ :)', reply_markup=self.keyboard.inline_url_mk('https://t.me/sneakerivan'))

        
    async def __special_offers(self, msg: types.Message) -> None:
        await msg.answer('–ö–∞–∫–∏–µ —Ç–æ –∞–∫—Ü–∏–∏', reply_markup=self.keyboard.inline_url_mk('https://t.me/sneakpeakusa/3'))


    async def __additional_info(self, msg: types.Message) -> None:
        await msg.answer('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –ø—Ä–æ—á—Ç–µ–Ω–∏—é', reply_markup=self.keyboard.inline_url_mk('https://t.me/sneakpeakusa/3'))


    async def __refferal_system(self, msg: types.Message) -> None:
        
        await self.bot.send_message(msg.from_user.id, f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ <a href='https://t.me/Sneakers_Peak_Bot?start={msg.from_user.id}'>URL</a>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {self.utils.get_referrals(msg.from_user.id)}\n–ë–∞–ª–∞–Ω—Å: {self.utils.get_balance(msg.from_user.id)}—Ä—É–±", parse_mode='HTML')



